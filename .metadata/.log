!SESSION 2018-06-13 11:02:05.199 -----------------------------------------------
eclipse.buildId=4.7.3.M20180330-0640
java.version=1.8.0_162
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=ja_JP
Framework arguments:  -product org.eclipse.epp.package.jee.product -keyring /Users/fumi/.eclipse_keyring
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.jee.product -keyring /Users/fumi/.eclipse_keyring

This is a continuation of log file /Library/WebServer/Documents/workspace/.metadata/.bak_0.log
Created Time: 2018-06-13 11:05:30.589

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.589
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.635
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.686
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.809
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.869
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.928
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.wst.validation 4 0 2018-06-13 11:05:30.999
!MESSAGE assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
!STACK 0
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: テキスト・ストリング (/* -*-c-*- *********************************************************/
/*******************************************************************/
/*******************************************************************/
/**
  This file is VM main loop.

  ----
  This file is auto generated by insns2vm.rb
  DO NOT TOUCH!

  If you want to fix something, you must edit 'insns.def'
 */


INSN_ENTRY(nop){
{


  DEBUG_ENTER_INSN("nop");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_nop 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_nop_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(nop));
{
#line 40 "insns.def"
    /* none */

#line 32 "vm.inc"
#undef CURRENT_INSN_nop
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(nop);}}}
INSN_ENTRY(getlocal){
{
  VALUE val;
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getlocal));
  COLLECT_USAGE_OPERAND(BIN(getlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(getlocal), 1, level);
{
#line 60 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);

#line 65 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getlocal);}}}
INSN_ENTRY(setlocal){
{
  rb_num_t level = (rb_num_t)GET_OPERAND(2);
  lindex_t idx = (lindex_t)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setlocal");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setlocal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setlocal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setlocal));
  COLLECT_USAGE_OPERAND(BIN(setlocal), 0, idx);
  COLLECT_USAGE_OPERAND(BIN(setlocal), 1, level);
{
#line 83 "insns.def"
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    /* optimized insns generated for level == (0|1) in defs/opt_operand.def */
    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;

#line 100 "vm.inc"
#undef CURRENT_INSN_setlocal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setlocal);}}}
INSN_ENTRY(getspecial){
{
  VALUE val;
  rb_num_t type = (rb_num_t)GET_OPERAND(2);
  rb_num_t key = (rb_num_t)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getspecial");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getspecial));
  COLLECT_USAGE_OPERAND(BIN(getspecial), 0, key);
  COLLECT_USAGE_OPERAND(BIN(getspecial), 1, type);
{
#line 104 "insns.def"
    val = vm_getspecial(th, GET_LEP(), key, type);

#line 126 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getspecial);}}}
INSN_ENTRY(setspecial){
{
  rb_num_t key = (rb_num_t)GET_OPERAND(1);
  VALUE obj = TOPN(0);
  DEBUG_ENTER_INSN("setspecial");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setspecial 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setspecial_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setspecial));
  COLLECT_USAGE_OPERAND(BIN(setspecial), 0, key);
{
#line 118 "insns.def"
    lep_svar_set(th, GET_LEP(), key, obj);

#line 152 "vm.inc"
#undef CURRENT_INSN_setspecial
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setspecial);}}}
INSN_ENTRY(getinstancevariable){
{
  VALUE val;
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(getinstancevariable), 1, ic);
{
#line 133 "insns.def"
    val = vm_getinstancevariable(GET_SELF(), id, ic);

#line 178 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getinstancevariable);}}}
INSN_ENTRY(setinstancevariable){
{
  IC ic = (IC)GET_OPERAND(2);
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setinstancevariable");
  ADD_PC(1+2);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setinstancevariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setinstancevariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setinstancevariable));
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 0, id);
  COLLECT_USAGE_OPERAND(BIN(setinstancevariable), 1, ic);
{
#line 148 "insns.def"
    vm_setinstancevariable(GET_SELF(), id, val, ic);

#line 206 "vm.inc"
#undef CURRENT_INSN_setinstancevariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setinstancevariable);}}}
INSN_ENTRY(getclassvariable){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getclassvariable));
  COLLECT_USAGE_OPERAND(BIN(getclassvariable), 0, id);
{
#line 162 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    val = rb_cvar_get(vm_get_cvar_base(cref, GET_CFP()), id);

#line 231 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getclassvariable);}}}
INSN_ENTRY(setclassvariable){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setclassvariable");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setclassvariable 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setclassvariable_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setclassvariable));
  COLLECT_USAGE_OPERAND(BIN(setclassvariable), 0, id);
{
#line 177 "insns.def"
    NODE *cref = rb_vm_get_cref(GET_ISEQ(), GET_EP());
    rb_cvar_set(vm_get_cvar_base(cref, GET_CFP()), id, val);

#line 258 "vm.inc"
#undef CURRENT_INSN_setclassvariable
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setclassvariable);}}}
INSN_ENTRY(getconstant){
{
  VALUE val;
  ID id = (ID)GET_OPERAND(1);
  VALUE klass = TOPN(0);
  DEBUG_ENTER_INSN("getconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_getconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getconstant));
  COLLECT_USAGE_OPERAND(BIN(getconstant), 0, id);
{
#line 199 "insns.def"
    val = vm_get_ev_const(th, GET_ISEQ(), klass, id, 0);

#line 283 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getconstant);}}}
INSN_ENTRY(setconstant){
{
  ID id = (ID)GET_OPERAND(1);
  VALUE val = TOPN(1);
  VALUE cbase = TOPN(0);
  DEBUG_ENTER_INSN("setconstant");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(2);
  #define CURRENT_INSN_setconstant 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setconstant_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setconstant));
  COLLECT_USAGE_OPERAND(BIN(setconstant), 0, id);
{
#line 221 "insns.def"
    vm_check_if_namespace(cbase);
    rb_const_set(cbase, id, val);

#line 311 "vm.inc"
#undef CURRENT_INSN_setconstant
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setconstant);}}}
INSN_ENTRY(getglobal){
{
  VALUE val;
  GENTRY entry = (GENTRY)GET_OPERAND(1);

  DEBUG_ENTER_INSN("getglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_getglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_getglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(getglobal));
  COLLECT_USAGE_OPERAND(BIN(getglobal), 0, entry);
{
#line 236 "insns.def"
    val = GET_GLOBAL((VALUE)entry);

#line 335 "vm.inc"
  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, 1);
  PUSH(val);
#undef CURRENT_INSN_getglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(getglobal);}}}
INSN_ENTRY(setglobal){
{
  GENTRY entry = (GENTRY)GET_OPERAND(1);
  VALUE val = TOPN(0);
  DEBUG_ENTER_INSN("setglobal");
  ADD_PC(1+1);
  PREFETCH(GET_PC());
  POPN(1);
  #define CURRENT_INSN_setglobal 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_setglobal_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN(BIN(setglobal));
  COLLECT_USAGE_OPERAND(BIN(setglobal), 0, entry);
{
#line 250 "insns.def"
    SET_GLOBAL((VALUE)entry, val);

#line 361 "vm.inc"
#undef CURRENT_INSN_setglobal
#undef INSN_IS_SC
#undef INSN_LABEL
#undef LABEL_IS_SC
  END_INSN(setglobal);}}}
INSN_ENTRY(putnil){
{
  VALUE val;


  DEBUG_ENTER_INSN("putnil");
  ADD_PC(1+0);
  PREFETCH(GET_PC());
  #define CURRENT_INSN_putnil 1
  #define INSN_IS_SC()     0
  #define INSN_LABEL(lab)  LABEL_putnil_##lab
  #define LABEL_IS_SC(lab) LABEL_##lab##_##t
  COLLECT_USAGE_INSN
	at org.eclipse.core.runtime.Assert.isTrue(Assert.java:110)
	at org.eclipse.core.internal.resources.MarkerInfo.checkValidAttribute(MarkerInfo.java:66)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttribute(MarkerInfo.java:152)
	at org.eclipse.core.internal.resources.MarkerInfo.setAttributes(MarkerInfo.java:178)
	at org.eclipse.core.internal.resources.Marker.setAttributes(Marker.java:331)
	at org.eclipse.wst.validation.internal.MarkerManager.createMarker(MarkerManager.java:86)
	at org.eclipse.wst.validation.Validator$V2.validate(Validator.java:1210)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:704)
	at org.eclipse.wst.validation.internal.ValManager$1.visit(ValManager.java:665)
	at org.eclipse.wst.validation.internal.ValManager.accept(ValManager.java:810)
	at org.eclipse.wst.validation.internal.ValManager.validate(ValManager.java:669)
	at org.eclipse.wst.validation.internal.ValBuilderJob$Visitor.visit(ValBuilderJob.java:299)
	at org.eclipse.core.internal.resources.Resource$2.visit(Resource.java:120)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:84)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:87)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:129)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:94)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:117)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:105)
	at org.eclipse.wst.validation.internal.ValBuilderJob.fullBuild(ValBuilderJob.java:219)
	at org.eclipse.wst.validation.internal.ValBuilderJob.run(ValBuilderJob.java:178)
	at org.eclipse.wst.validation.internal.ValBuilderJob.runInWorkspace(ValBuilderJob.java:126)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.equinox.p2.updatechecker 4 0 2018-06-13 11:08:54.980
!MESSAGE Exception in update check thread
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.equinox.internal.p2.transport.ecf.RepositoryTransport.download(RepositoryTransport.java:125)
	at org.eclipse.equinox.internal.p2.transport.ecf.RepositoryTransport.download(RepositoryTransport.java:156)
	at org.eclipse.equinox.internal.p2.repository.helpers.AbstractRepositoryManager.loadIndexFile(AbstractRepositoryManager.java:735)
	at org.eclipse.equinox.internal.p2.repository.helpers.AbstractRepositoryManager.loadRepository(AbstractRepositoryManager.java:657)
	at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:96)
	at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:92)
	at org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository.addChild(CompositeMetadataRepository.java:166)
	at org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository.<init>(CompositeMetadataRepository.java:106)
	at org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepositoryFactory.load(CompositeMetadataRepositoryFactory.java:122)
	at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.factoryLoad(MetadataRepositoryManager.java:57)
	at org.eclipse.equinox.internal.p2.repository.helpers.AbstractRepositoryManager.loadRepository(AbstractRepositoryManager.java:768)
	at org.eclipse.equinox.internal.p2.repository.helpers.AbstractRepositoryManager.loadRepository(AbstractRepositoryManager.java:668)
	at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:96)
	at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:92)
	at org.eclipse.equinox.internal.p2.updatechecker.UpdateChecker.getAvailableRepositories(UpdateChecker.java:152)
	at org.eclipse.equinox.internal.p2.updatechecker.UpdateChecker.checkForUpdates(UpdateChecker.java:130)
	at org.eclipse.equinox.internal.p2.updatechecker.UpdateChecker$UpdateCheckThread.run(UpdateChecker.java:74)
